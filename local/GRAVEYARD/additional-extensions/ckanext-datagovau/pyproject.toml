[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-datagovau"
authors = [
    {name = "LinkDigital", email = "support@linkdigital.com.au"},
]
description = "Extension for customising CKAN for data.gov.au"
readme = "README.rst"
requires-python = ">=3.9"
keywords = ["CKAN"]
license = { text = "AGPL" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
dependencies = [
             "boto3",
             "ckanext-toolbelt",
             "feedparser",
             "python-dateutil",
             "requests",
             "shapely",
             "typing_extensions",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest-ckan",
    "pytest-playwright",
    "pytest-factoryboy",
    "pytest-mock",
]

[project.entry-points."ckan.plugins"]
datagovau = "ckanext.datagovau.plugin:DataGovAuPlugin"
dga_resource = "ckanext.datagovau.subplugins.resource:ResourcePlugin"

[project.entry-points."ckan.rdf.profiles"]
dga_schemaorg = "ckanext.datagovau.profiles:DgaSchemaOrgProfile"

[project.entry-points."babel.extractors"]
ckan = "ckan.lib.extract:extract_ckan"

[project.urls]
Homepage = "https://bitbucket.org/link-digital-development/ckanext-datagovau"

[tool.setuptools.dynamic]
version = {attr = "ckanext.datagovau.__version__"}

[tool.setuptools.packages]
find = {}

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
       # "ANN0", # type annotations for function arguments
       "B",  # likely bugs and design problems
       # "BLE",  # do not catch blind exception
       "C4",  # better list/set/dict comprehensions
       # # "C90",  # check McCabe complexity
       # # "DTZ", # enforce timezone in date objects
       "E",  # pycodestyle error
       "W",  # pycodestyle warning
       "F",  # pyflakes
       "FA", # verify annotations from future
       "G",  # format strings for logging statements
       "N",  # naming conventions
       "I",  # isort
       "ICN", # import conventions
       # # "D1",  # require doc
       "D2",  # doc formatting
       "D4",  # doc convention
       # "PL",  # pylint
       # "PERF", # performance anti-patterns
       "PT",  # pytest style
       "PIE",  # misc lints
       "RET",  # improvements for return statements
       "RSE",  # improvements for rise statements
       # "S",  # security testing
       "SIM",  # simplify code
       "T10",  # debugging statements
       "T20",  # print statements
       "TID",  # tidier imports
       # "TRY",  # better exceptions
       "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
       "RET503", # don't enforce return-None
       "E712", # comparison to bool: violated by SQLAlchemy filters
       "PT004", # fixture does not return anything, add leading underscore: violated by clean_db
       "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
]

[tool.ruff.lint.per-file-ignores]
"ckanext/datagovau/tests*" = ["S", "PL", "ANN"]
"ckanext/datagovau/logic/*" = [
            "D417", # actions don't describe context and data_dict
]

[tool.ruff.lint.flake8-import-conventions.aliases]
"ckan.plugins" = "p"
"ckan.plugins.toolkit" = "tk"
sqlalchemy = "sa"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
section-order = [
              "future",
              "standard-library",
              "first-party",
              "third-party",
              "ckan",
              "ckanext",
              "self",
              "local-folder",
]

[tool.ruff.lint.isort.sections]
ckan = ["ckan"]
ckanext = ["ckanext"]
self = ["ckanext.datagovau"]

[tool.pytest.ini_options]
addopts = "--ckan-ini test_config/test.ini -m 'not playwright'"
filterwarnings = [
               "ignore::sqlalchemy.exc.SADeprecationWarning",
               "ignore::sqlalchemy.exc.SAWarning",
               "ignore::DeprecationWarning",
]

[tool.pyright]
pythonVersion = "3.9"
include = ["ckanext"]
exclude = [
    "**/test*",
    "**/migration",
]
strict = []

strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true

[tool.coverage.run]
branch = true
omit = ["ckanext/datagovau/tests/*"]
