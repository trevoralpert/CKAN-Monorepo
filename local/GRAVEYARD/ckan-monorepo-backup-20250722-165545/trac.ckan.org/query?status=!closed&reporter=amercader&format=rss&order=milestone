<?xml version="1.0"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <title>CKAN: Ticket Query</title>
    <link>http://localhost/query?status=!closed&amp;reporter=amercader&amp;order=milestone</link>
    <description>The open source data portal software</description>
    <language>en-US</language>
    <image>
      <title>CKAN</title>
      <url>http://assets.okfn.org/p/ckan/img/ckan_logo_shortname.png</url>
      <link>http://localhost/query?status=!closed&amp;reporter=amercader&amp;order=milestone</link>
    </image>
    <generator>Trac 0.12.3</generator>
    <item>
        <link>http://localhost/ticket/2963</link>
        <guid isPermaLink="false">http://localhost/ticket/2963</guid>
        <title>#2963: Timeout on tag pages with lots of datasets</title>
        <pubDate>Mon, 15 Oct 2012 10:13:19 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
e.g. &lt;a class="ext-link" href="http://thedatahub.org/tag/lod"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://thedatahub.org/tag/lod&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Tags with less datasets work fine (e.g. &lt;a class="ext-link" href="http://thedatahub.org/tag/railways"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://thedatahub.org/tag/railways&lt;/a&gt;)
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2963#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2965</link>
        <guid isPermaLink="false">http://localhost/ticket/2965</guid>
        <title>#2965: Stats extension broken on 1.8</title>
        <pubDate>Mon, 15 Oct 2012 10:15:41 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;ul&gt;&lt;li&gt;Graphs not showing (looks like a flot related file is missing)
&lt;/li&gt;&lt;li&gt;Wrong groups counts (e.g. Data Explorer Examples show 1800 datasets when it onlu has 8)
&lt;/li&gt;&lt;/ul&gt;</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2965#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/3002</link>
        <guid isPermaLink="false">http://localhost/ticket/3002</guid>
        <title>#3002: API v1/2 'legacy' search parameters must be escaped before they are put into a Solr query string</title>
        <pubDate>Fri, 19 Oct 2012 09:32:22 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Just to track @tauberer patch on Github.
Would be nice to write a test for it. Probably going to 1.8.1
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/3002#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/3003</link>
        <guid isPermaLink="false">http://localhost/ticket/3003</guid>
        <title>#3003: New pg databases should be created with UTF8 encoding rather than system default</title>
        <pubDate>Fri, 19 Oct 2012 09:33:19 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Just to track @tauberer patch on Github.
Probably going to 1.8.1
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/3003#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2324</link>
        <guid isPermaLink="false">http://localhost/ticket/2324</guid>
        <title>#2324: Link API docs to relevant version not just latest</title>
        <pubDate>Wed, 25 Apr 2012 10:58:52 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
The link to the API docs in the footer always points to the latests docs, which may not be correct for the particular CKAN version.
&lt;/p&gt;
&lt;p&gt;
Also, remove the 'API' link (to /api/1) as pointless and misleading
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2324#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2745</link>
        <guid isPermaLink="false">http://localhost/ticket/2745</guid>
        <title>#2745: Password reset returns an exception if the key parameter is missing</title>
        <pubDate>Tue, 24 Jul 2012 16:05:31 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Instead of showing a notice, the password reset page throws an exception if the key parameter is missing:
&lt;/p&gt;
&lt;pre class="wiki"&gt;Module ckan.controllers.user:329 in perform_reset
         c.reset_key = request.params.get('key')
               if not mailer.verify_reset_link(user_obj, c.reset_key):
                   h.flash_error(_('Invalid reset key. Please try again.'))
                   abort(403)
 if not mailer.verify_reset_link(user_obj, c.reset_key):
Module ckan.lib.mailer:100 in verify_reset_link
     if not user.reset_key or len(user.reset_key) &amp;lt; 5:
               return False
           return key.strip() == user.reset_key
 return key.strip() == user.reset_key
AttributeError: 'NoneType' object has no attribute 'strip'
&lt;/pre&gt;&lt;p&gt;
Apart from the obvious fix of checking for the 'key' parameter, it seems like is quite common to get these reset urls without the key parameter, so I suspect some email clients might strip the query params when building the links. We could avoid this problem by making the key part of the url instead of a param:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://thedatahub.org/en/user/reset/3086e91c-fe09-4a98-92e1-19de67a9ac9d/b4c2d03fa8"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://thedatahub.org/en/user/reset/3086e91c-fe09-4a98-92e1-19de67a9ac9d/b4c2d03fa8&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
instead of:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="http://thedatahub.org/en/user/reset/3086e91c-fe09-4a98-92e1-19de67a9ac9d?key=b4c2d03fa8"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://thedatahub.org/en/user/reset/3086e91c-fe09-4a98-92e1-19de67a9ac9d?key=b4c2d03fa8&lt;/a&gt;
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2745#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2788</link>
        <guid isPermaLink="false">http://localhost/ticket/2788</guid>
        <title>#2788: Speed improvements on creating/updating and indexing</title>
        <pubDate>Wed, 01 Aug 2012 14:56:32 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Specially needed when importing large numbers of datasets.
&lt;/p&gt;
&lt;p&gt;
Profiling the import command from the harvesting extension has shown some areas where improvements could be made.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2788#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1134</link>
        <guid isPermaLink="false">http://localhost/ticket/1134</guid>
        <title>#1134: CREP0003: Description and Configuration of Harvesters</title>
        <pubDate>Wed, 11 May 2011 10:14:28 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
&lt;strong&gt;Proposer&lt;/strong&gt;: Adrià Mercader
&lt;/p&gt;
&lt;h2 id="Abstract"&gt;Abstract&lt;/h2&gt;
&lt;p&gt;
The new harvester interface allows to create harvesters for different
sources, but right now harvesters don't have many ways to describe and
configure themselves. We need a way of allowing them to:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Expose their type and other details so they can be used internally
and on the UI.
&lt;/li&gt;&lt;li&gt;Define configuration settings for particular harvester instances.
&lt;/li&gt;&lt;/ul&gt;&lt;h2 id="TheProblem"&gt;The Problem&lt;/h2&gt;
&lt;h3 id="Harvesterdescription"&gt;Harvester description&lt;/h3&gt;
&lt;p&gt;
The current UI for adding and editing harvest sources is the same used
in ckanext-dgu, and thus the 3 harvester types used in DGU to harvest
various GEMINI realted sources are hardcoded in the form. The form will
be migrated to a DGU-independent one, so we need the harvesters to
provide all the necessary data. There is a current &lt;tt&gt;get_type&lt;/tt&gt; method
that returns the harvester type, but for make it compatible with the DGU
forms, it returns a machine-readable string (e.g. "CSW Server"), making
it error prone.
&lt;/p&gt;
&lt;h3 id="Arbitraryconfiguration"&gt;Arbitrary configuration&lt;/h3&gt;
&lt;p&gt;
In the current implementation, when the harvest process is started,
ckanext-harvest looks for all the available plugins that implement the
&lt;tt&gt;IHarvester&lt;/tt&gt; interface and calls the appropiate methods for the
current stage (&lt;tt&gt;gather_stage&lt;/tt&gt;,&lt;tt&gt;fetch_stage&lt;/tt&gt;,&lt;tt&gt;import_stage&lt;/tt&gt;).
At these stages, harvesters have no way of applying arbitrary
configuration options, so all harvesters of the same type behave on the
same way.
For instance, the CKAN harvester needs a way to define the API version
to use when harvesting remote instances (Right now, the version 2 is
hardcoded on the code).
&lt;/p&gt;
&lt;h2 id="Specification"&gt;Specification&lt;/h2&gt;
&lt;h3 id="Harvesterdescription1"&gt;Harvester description&lt;/h3&gt;
&lt;p&gt;
Harvesters will need to provide the following information so the UI form
can be built:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;name: machine-readable name (e.g. "waf"). This will be the value
stored in the database, and the one used by ckanext-harvest to
call the appropiate harvester.
&lt;/li&gt;&lt;li&gt;title: human-readable name (e.g. "Web Accessible Folder (WAF)").
This will appear in the form's select box.
&lt;/li&gt;&lt;li&gt;description: a description of what the harvester does (e.g. "A Web
Accessible Folder (WAF) displaying a list of GEMINI 2.1
documents"). This will appear on the form as a guidance to the
user.
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
The way to provide it will be an &lt;tt&gt;info&lt;/tt&gt; method that all harvesters
must implement, which will return a dictionary with the previous
elements:
&lt;/p&gt;
&lt;pre class="wiki"&gt;    {
        'name': 'csw',
        'title': 'CSW Server',
        'description': 'A server that implements OGC's Catalog Service
                        for the Web (CSW) standard'
    }
&lt;/pre&gt;&lt;h3 id="Arbitraryconfiguration1"&gt;Arbitrary configuration&lt;/h3&gt;
&lt;p&gt;
As different harvesters will have very different needs, we need to
provide a way to persist arbitrary configuration flags for each harvest
source. The more flexible way given the current architecture in my
opinion would be to store the configuration options as a JSON encoded
object as a property of the harvest source (There already is an unused
DB field called &lt;tt&gt;config&lt;/tt&gt; in the database) (Maybe using &lt;a class="missing wiki"&gt;JsonType?&lt;/a&gt;?).
&lt;/p&gt;
&lt;p&gt;
This will mean adding an extra field in the harvest source form to allow
entering the configuration. This could be just a simple text field where
users enter the JSON encoded object or a more clever mechanism (i.e an
"Add a configuration flag" link that adds two new text fields for the
key and value for each flag, and a mechanism to later build the JSON
object). In any case, this should probably be hidden in an "Advance
options" section.
&lt;/p&gt;
&lt;h2 id="Whydoitthisway"&gt;Why do it this way&lt;/h2&gt;
&lt;h3 id="Harvesterdescription2"&gt;Harvester description&lt;/h3&gt;
&lt;p&gt;
The &lt;tt&gt;info&lt;/tt&gt; method would provide a single point to get all the
information related to the harvester, and future properties could be
added to the dictionary returned without having to modify the interface.
&lt;/p&gt;
&lt;h3 id="Arbitraryconfiguration2"&gt;Arbitrary configuration&lt;/h3&gt;
&lt;p&gt;
There is an already existing &lt;tt&gt;config&lt;/tt&gt; field in the database, so we
won't need to change the model.
Harvesters could access the config object at any of the stages. Of
course they could provide default values in their implementations so
users don't need to enter them everytime.
&lt;/p&gt;
&lt;h2 id="Implementationplan"&gt;Implementation plan&lt;/h2&gt;
&lt;h3 id="Deliverables"&gt;Deliverables&lt;/h3&gt;
&lt;h3 id="Risksandmitigations"&gt;Risks and mitigations&lt;/h3&gt;
&lt;p&gt;
The highest risk on the harvesters &lt;tt&gt;info&lt;/tt&gt; method side is that
harvester implementation don't offer one of the necessary properties
(namely name and title). This could fire a warning when showing the
UI form or using the CLI.
&lt;/p&gt;
&lt;h3 id="Participants"&gt;Participants&lt;/h3&gt;
&lt;p&gt;
Adrià Mercader to do it.
&lt;/p&gt;
&lt;h3 id="Progress"&gt;Progress&lt;/h3&gt;
&lt;p&gt;
None yet.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1134#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1152</link>
        <guid isPermaLink="false">http://localhost/ticket/1152</guid>
        <title>#1152: True support for generic CSW servers</title>
        <pubDate>Mon, 23 May 2011 09:02:14 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
The CSW harvesters implemented at the moment were developed with the DGU
project in mind, and they assume all remote CSW servers to implement the
Gemini 2 specification. Gemini 2 is the profile defined in the UK for
INSPIRE complying metadata, so obviously catalogs from other countries
or non-INSPIRE complying ones won't be able to be harvested.
&lt;/p&gt;
&lt;p&gt;
The changes needed to support generic CSW servers (i.e. those
implementing the ISO 19139 profile) are:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Handling the validators (right now are hardcoded in the harvester
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
code). This probably involves issues discussed in the CREP 3
(ticket &lt;a class="new ticket" href="http://localhost/ticket/1134" title="CREP: CREP0003: Description and Configuration of Harvesters (new)"&gt;#1134&lt;/a&gt;)
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Changes in the model to adapt the specification to ISO 19139
&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Renaming objects and classes which are now Gemini-centric
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
List of CSW servers tested:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://spreadsheets.google.com/spreadsheet/ccc?key=0Atp3cZFjuIOAdDBVQWRINnlfN1d0b2lleHVEdjBSb2c&amp;amp;hl=en_US&amp;amp;authkey=CNu4hsEB#gid=0"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://spreadsheets.google.com/spreadsheet/ccc?key=0Atp3cZFjuIOAdDBVQWRINnlfN1d0b2lleHVEdjBSb2c&amp;amp;hl=en_US&amp;amp;authkey=CNu4hsEB#gid=0&lt;/a&gt;
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1152#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1273</link>
        <guid isPermaLink="false">http://localhost/ticket/1273</guid>
        <title>#1273: Create docs for API v3</title>
        <pubDate>Mon, 15 Aug 2011 12:41:23 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description></description>
        <category>Results</category>
        <comments>http://localhost/ticket/1273#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1278</link>
        <guid isPermaLink="false">http://localhost/ticket/1278</guid>
        <title>#1278: Refactor authorized_query calls</title>
        <pubDate>Mon, 15 Aug 2011 13:32:57 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
There are some functions that still use the Auhtorizer().authorized_query method:
&lt;/p&gt;
&lt;pre class="wiki"&gt;./ckan/controllers/authorization_group.py:24:        query = ckan.authz.Authorizer().authorized_query(c.user, model.AuthorizationGroup)
./ckan/lib/base.py:237:        groups = ckan.authz.Authorizer.authorized_query(c.user, model.Group,
./ckan/lib/search/sql.py:55:        q = authz.Authorizer().authorized_query(username, model.Group)
./ckan/lib/search/sql.py:118:        q = authz.Authorizer().authorized_query(self.options.get('username'), model.Package)
./ckan/logic/action/get.py:154:    query = Authorizer().authorized_query(user, model.Group, model.Action.EDIT)
./ckan/tests/test_authz.py:158:        q = self.authorizer.authorized_query(self.notadmin.name, model.Package)
./ckan/tests/test_authz.py:353:        q = self.authorizer.authorized_query(self.notmember.name, model.Package)
./ckan/tests/test_authz.py:357:        q = self.authorizer.authorized_query(self.member.name, model.Package)
./ckan/tests/functional/test_authorization_group.py:44:        group_count = Authorizer.authorized_query(u'russianfan', model.AuthorizationGroup).count()
&lt;/pre&gt;</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1278#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1352</link>
        <guid isPermaLink="false">http://localhost/ticket/1352</guid>
        <title>#1352: Use logic functions instead of as_dict when indexing entities</title>
        <pubDate>Wed, 21 Sep 2011 14:29:57 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
The current search implementation uses the output of the the as_dict method of the domain Package object to update the index
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://bitbucket.org/okfn/ckan/src/56c79e3fc44c/ckan/lib/search/index.py#cl-48"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://bitbucket.org/okfn/ckan/src/56c79e3fc44c/ckan/lib/search/index.py#cl-48&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It also uses package_to_api1 in the &lt;a class="missing wiki"&gt;SynchronousSearch?&lt;/a&gt; plugin:
&lt;/p&gt;
&lt;p&gt;
&lt;a class="ext-link" href="https://bitbucket.org/okfn/ckan/src/f9dfb0506594/ckan/lib/search/__init__.py#cl-93"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://bitbucket.org/okfn/ckan/src/f9dfb0506594/ckan/lib/search/__init__.py#cl-93&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This prevents extensions from being able to index custom properties (e.g. faceting by custom extras not included in the model).
&lt;/p&gt;
&lt;p&gt;
The search should use the logic function to get the package properties:
&lt;/p&gt;
&lt;pre class="wiki"&gt;get_action('package_show')(context,data_dict)
&lt;/pre&gt;</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1352#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1355</link>
        <guid isPermaLink="false">http://localhost/ticket/1355</guid>
        <title>#1355: Package extras property does not include the newly created ones</title>
        <pubDate>Mon, 26 Sep 2011 10:48:46 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
The extras in the package object sent to the extensions after editing (&lt;a class="ext-link" href="https://bitbucket.org/okfn/ckan/src/01efd5649c10/ckan/logic/action/update.py#cl-226"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;https://bitbucket.org/okfn/ckan/src/01efd5649c10/ckan/logic/action/update.py#cl-226&lt;/a&gt;) do not include the newly added.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1355#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2268</link>
        <guid isPermaLink="false">http://localhost/ticket/2268</guid>
        <title>#2268: UKLP Use same schema as form for harvested records</title>
        <pubDate>Fri, 30 Mar 2012 11:56:46 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Datasets created via the harvesting (UKLP ones) and the ones created via the form use a different schema. That could lead to problems. We need to discuss the best approach.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2268#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1815</link>
        <guid isPermaLink="false">http://localhost/ticket/1815</guid>
        <title>#1815: Reenable Sparql endpoint on publicdata.eu</title>
        <pubDate>Mon, 20 Feb 2012 17:08:43 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Estimate: ?
&lt;/p&gt;
&lt;p&gt;
The 4store Sparql endpoint has been down for a long time.
It needs to be reenabled and we need to check that the necessary informtion is pushed when creating /editing a dataset.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1815#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/1818</link>
        <guid isPermaLink="false">http://localhost/ticket/1818</guid>
        <title>#1818: Spatial metadata editor</title>
        <pubDate>Mon, 20 Feb 2012 18:52:21 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Estimate 2.5d
&lt;/p&gt;
&lt;p&gt;
Right now users need to manually enter a geojson value in the 'spatial' extra field in order to define a geometry for a dataset.
&lt;/p&gt;
&lt;p&gt;
We need a map widget on the edit form that allows users to draw the geometry on top of a map. This will be based on the draw functions offered by &lt;a class="missing wiki"&gt;OpenLayers?&lt;/a&gt; &lt;a class="missing changeset" title="No default repository defined"&gt;[1]&lt;/a&gt;, &lt;a class="missing changeset" title="No default repository defined"&gt;[2]&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Things to take into account:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Integration with the form sections.
&lt;/li&gt;&lt;li&gt;Allow some degree of configuration (default extent, limit geometry types...)
&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
&lt;a class="missing changeset" title="No default repository defined"&gt;[1]&lt;/a&gt; &lt;a class="ext-link" href="http://openlayers.org/dev/examples/draw-feature.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://openlayers.org/dev/examples/draw-feature.html&lt;/a&gt;
&lt;a class="missing changeset" title="No default repository defined"&gt;[2]&lt;/a&gt; &lt;a class="ext-link" href="http://openlayers.org/dev/examples/modify-feature.html"&gt;&lt;span class="icon"&gt;​&lt;/span&gt;http://openlayers.org/dev/examples/modify-feature.html&lt;/a&gt;
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/1818#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2382</link>
        <guid isPermaLink="false">http://localhost/ticket/2382</guid>
        <title>#2382: Investigate options for basic geocoding</title>
        <pubDate>Mon, 14 May 2012 17:39:20 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
A simple way for geocoding place names would be very useful, e.g in the spatial search, defining a geometry for a dataset (on the form or bulk)
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2382#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2641</link>
        <guid isPermaLink="false">http://localhost/ticket/2641</guid>
        <title>#2641: Adapt spatial widgets to new theme</title>
        <pubDate>Mon, 09 Jul 2012 15:02:27 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Dataset extent map and spatial filter need to adapted to the new theme, as they are not showing up now
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2641#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/2949</link>
        <guid isPermaLink="false">http://localhost/ticket/2949</guid>
        <title>#2949: Reenable Data API button on the new theme</title>
        <pubDate>Mon, 01 Oct 2012 16:04:24 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
The checks to show or not the button need to be updated for the latest datastore version
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/2949#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/3023</link>
        <guid isPermaLink="false">http://localhost/ticket/3023</guid>
        <title>#3023: New methods on IPackageController to provide access to the data_dict</title>
        <pubDate>Thu, 22 Nov 2012 17:00:57 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Extension hooking into the edit and create methods of the IPackageController interface receive the package object. This may not include all the fields that came from the form. The new extension points will pass the validated data_dict so extensions can have access to it
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/3023#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/3025</link>
        <guid isPermaLink="false">http://localhost/ticket/3025</guid>
        <title>#3025: Add requests to core requirements</title>
        <pubDate>Tue, 27 Nov 2012 21:35:24 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
Because yes please
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/3025#changelog</comments>
    </item><item>
        <link>http://localhost/ticket/3026</link>
        <guid isPermaLink="false">http://localhost/ticket/3026</guid>
        <title>#3026: Support icons on  nav_named_link</title>
        <pubDate>Fri, 30 Nov 2012 18:51:56 GMT</pubDate>
        
        <dc:creator>amercader</dc:creator>

        <description>&lt;p&gt;
nav_named_link won't include the nice icon even when passing the icon keyword param.
&lt;/p&gt;
</description>
        <category>Results</category>
        <comments>http://localhost/ticket/3026#changelog</comments>
    </item>
 </channel>
</rss>