name: Tests
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install requirements
        run: pip install flake8 pycodestyle
      - name: Check syntax
        run: flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics --exclude ckan
      - name: Run flake8
        run: flake8 . --count --max-line-length=127 --statistics --exclude ckan

  test:
    needs: lint
    strategy:
      matrix:
        include:
          - ckan-version: "2.11"
            ckan-image: "ckan/ckan-dev:2.11-py3.10"
          - ckan-version: "2.10"
            ckan-image: "ckan/ckan-dev:2.10-py3.10"
      fail-fast: false

    name: CKAN ${{ matrix.ckan-version }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.ckan-image }}
      options: --user root
    services:
      solr:
        image: ckan/ckan-solr:${{ matrix.ckan-version }}-solr9
      postgres:
        image: ckan/ckan-postgres-dev:${{ matrix.ckan-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:3
    env:
      CKAN_SQLALCHEMY_URL: postgresql://ckan_default:pass@postgres/ckan_test
      CKAN_DATASTORE_WRITE_URL: postgresql://datastore_write:pass@postgres/datastore_test
      CKAN_DATASTORE_READ_URL: postgresql://datastore_read:pass@postgres/datastore_test
      CKAN_SOLR_URL: http://solr:8983/solr/ckan
      CKAN_REDIS_URL: redis://redis:6379/1

    steps:

      - uses: actions/checkout@v3
      - name: Setup qsv
        run: |
          apt install unzip
          wget https://github.com/jqnatividad/qsv/releases/download/3.3.0/qsv-3.3.0-x86_64-unknown-linux-musl.zip
          unzip qsv-3.3.0-x86_64-unknown-linux-musl.zip -d $RUNNER_TEMP/qsvbin
          echo "$RUNNER_TEMP/qsvbin" >> $GITHUB_PATH

      - run: qsv --version

      - name: Install requirements
        run: |
          pip install -r requirements.txt
          pip install -r dev-requirements.txt
          pip install -e .
          # Replace default path to CKAN core config file with the one on the container
          sed -i -e 's/use = config:.*/use = config:\/srv\/app\/src\/ckan\/test-core.ini/' test.ini
        
          # Replace qsv bin to one in path, will produce error in logs
          sed -i -e 's/ckanext.qa.qsv_bin.*/ckanext.qa.qsv_bin = qsv/' test.ini      
      
      - name: Setup extension
        run: |
          ckan -c test.ini db init
          ckan -c test.ini qa init

      - name: Run tests
        run: pytest --ckan-ini=test.ini --cov=ckanext.qa --disable-warnings ckanext/qa/tests --junitxml=junit.xml -o junit_family=legacy

      - name: install codecov requirements
        run: |
          apt-get update
          apt-get install -y curl gpg

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ !cancelled() }}
        continue-on-error: true #don't fail if we can't upload (ie a fork that does not have integration plugged in)
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false # optional (default = false)
          flags: ckan-${{ matrix.ckan-version }}

      - name: Upload test results to Codecov
        uses: codecov/test-results-action@v1
        if: ${{ !cancelled() }}
        continue-on-error: true #don't fail if we can't upload (ie a fork that does not have integration plugged in)
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false # optional (default = false)
          flags: ckan-${{ matrix.ckan-version }}
